<?xml version="1.0" encoding="UTF-8"?><?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml"
	schematypens="http://purl.oclc.org/dsdl/schematron"?>
<!--<?xml-model href="schemas/odd4odds.rnc" type="application/relax-ng-compact-syntax"?>
<?xml-model href="schemas/odd4odds.isosch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>-->
<TEI xmlns="http://www.tei-c.org/ns/1.0"
  xmlns:sch="http://purl.oclc.org/dsdl/schematron"
  xmlns:rng="http://relaxng.org/ns/structure/1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  version="2.9.1"
  xml:lang="en">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>ODD for Amadis in Translation</title>
        <author>Elisa E. Beshero-Bondar</author>
      </titleStmt>
      <publicationStmt>
	<publisher>newtfire.org</publisher>
        <availability>
          <p>Available to anyone to share and adapt according to the terms of Creative Commons Non-Commercial ShareAlike 4.0 International License.</p>
        </availability>
      </publicationStmt>
      <sourceDesc>
        <p>Created during the June 2016 DHSI class on ODDs taught by Syd Bauman and James Cummings.</p>
        <p>Adapted from a comprehensive Schematron file initially created for the Amadis project.</p>
      </sourceDesc>
    </fileDesc>
    <revisionDesc>
      <change who="#ebb" when="2016-06-14">initiated this ODD</change> 
      <change who="#ebb" when="2017-03-11">modified to comply with the tei_odds.rng schema, and to complete schema definitions.</change>
      <change who="#ebb" when="2017-03-12">incorporated into this ODD the Schematron rules written by Helena Berm√∫dez Sabel for governing feature structures markup of translation types in this project.</change>
    </revisionDesc>
  </teiHeader>
  <text>
      <!-- 
           This template is intended to give you a quick starting point for
           writing ODD files. You may find it useful to copy and paste 
           specific constructs from odd_extended_template.xml, which contains
           commented templates for specific ODD-writing tasks.
      -->
    <body>
      <p><!--One or more paragraphs describing the customization.-->This ODD file is designed to contrain a project that studies the translation of a text in early modern Spanish, Montalvo's Amadis de Gaula, into other languages, beginning with Robert Southey's translation into English in the early nineteenth century.</p>

      <!-- The <schemaSpec> element is in effect the root element for
           the schema specification portion of the ODD. 
              - @ident is required; it is allowed to be any name.
	      - @source establishes the base version oF TEI to build with
              - @start says what element(s) are allowed as the root element
                  of documents conforming to this schema.  -->
      <schemaSpec ident="AmadisODD" source="tei:current" start="TEI">

        <!-- 
             The <moduleRef> elements specify which TEI modules will
             be included in the schema. The value of the @key
             attribute is the name of the module. The first four listed here 
             are required: core, tei, header, textstructure. 
        
             To trim the contents of these modules, use @include OR @except:
               - @include lists the elements from the module that will be included in the schema
               - @except lists the elements from the module that will be excluded from the schema        
        -->
        <moduleRef key="core" except="addrLine address binaryObject cb divGen postBox postCode sp speaker stage street teiCorpus"/>     
        <moduleRef key="tei"/>
        <moduleRef key="header"/>
        <moduleRef key="textstructure" except="div1 div2 div3 div4 div5 div6 div7"/>
        <moduleRef key="analysis" include="cl s"/>
        <moduleRef key="gaiji" include="charDecl char mapping glyph"/>
        <moduleRef key="transcr" include="facsimile supplied"></moduleRef>
        <moduleRef key="linking" include="anchor seg"/>
        <moduleRef key="namesdates" include="listPerson person persName forename surname roleName listPlace place placeName geo"/>
        <moduleRef key="iso-fs"/>
        <moduleRef key="figures" include="figure"/>
        <moduleRef key="msdescription" include="locus"/>    
        
        <!--ebb div element specs-->
        <elementSpec ident="div" module="textstructure" mode="change">
          <attList>
            <attDef ident="xml:id" mode="change" usage="req"/>
            <attDef ident="type" mode="replace" usage="req">
              <valList type="closed">
                <valItem ident="book"/>
                <valItem ident="chapter"/>
                <valItem ident="table"/>
              </valList>
            </attDef>
          </attList>
        </elementSpec>
        
        <!--ebb: milestone element specs -->
        <elementSpec module="core" ident="milestone" mode="change">
          <classes mode="change">
            <memberOf key="att.global" mode="delete"/>
            <memberOf key="att.global.analytic" mode="add"/>
            <memberOf key="att.global.responsibility" mode="add"/>
            <memberOf key="att.global.rendition" mode="delete"/>
            <memberOf key="att.edition" mode="delete"/>
          </classes>
          <attList>
            <attDef ident="unit" mode="replace" usage="req">
              <datatype>
                <!--<dataRef key="teidata.word"/>-->
                <rng:text/>
              </datatype>
              <valList type="closed">
                <valItem ident="p"/>
                <valItem ident="said"/>
              </valList>
            </attDef>
            <attDef ident="ana" mode="replace">
              <datatype><rng:text/></datatype>
              <valList type="closed">
                <valItem ident="start"/>
                <valItem ident="end"/>
                <valItem ident="intStart"/>
                <valItem ident="intEnd"/>
              </valList>
            </attDef>
            <attDef ident="type" mode="replace">
              <datatype><rng:text/></datatype>
              <valList type="closed">
                <valItem ident="unclear"/>
              </valList>
            </attDef>
            <attDef ident="cert" mode="replace">
              <datatype><rng:text/></datatype>
              <valList type="closed">
                <valItem ident="low"/>
                <valItem ident="medium"/>
                <valItem ident="unknown"/>
              </valList>
            </attDef>
          </attList>
        </elementSpec>
        
        <!--ebb: anchor element specs -->
        <elementSpec module="linking" ident="anchor" mode="change">
          <classes mode="change">
            <memberOf key="att.global" mode="delete"/>
            <memberOf key="att.global.linking" mode="add"/>
            <memberOf key="att.global.rendition" mode="delete"/>
           
          </classes>
          <constraintSpec ident="anchor-distinct-anas" scheme="schematron">
            <constraint>
              <sch:report test="@ana = preceding-sibling::tei:anchor[1]/@ana">
                The @ana must NOT be the same on two subsequent anchors!
              </sch:report>   
            </constraint>
          </constraintSpec>
          <attList>
            <attDef ident="ana" mode="replace" usage="req">
              <datatype><rng:text/></datatype>
              <valList type="closed">
                <valItem ident="start"/>
                <valItem ident="end"/>
                <valItem ident="intStart"/>
                <valItem ident="intEnd"/>
              </valList>
            </attDef>
            <attDef ident="type" mode="replace">
              <datatype><rng:text/></datatype>
              <valList type="closed">
                <valItem ident="add"/>
                <valItem ident="report"/>
                <valItem ident="direct"/>
              </valList>
            </attDef>
          </attList>
        </elementSpec>
        <!--feature structures element specs -->
        <elementSpec ident="f" module="iso-fs" mode="change">
        <!--2017-03-12 ebb: We are occasionally outputting two <string> elements inside an <f> in feature structures (which contain main text and a note from Southey). However, TEI's content model for <f> permits only one element child, and my schematron rule below doesn't work to counteract that. I'd need to interfere with the RNG content model. And I don't think it's necessary because we can use the <vColl> element instead to wrap the double strings. I'm commenting out the rule, since it doesn't work anyway. --> 
          <!--<constraintSpec ident="string-children-of-f" scheme="schematron">
            <constraint>
                  <sch:assert test="count(tei:string) le 2">We permit two string elements as a child of the f element in the special case when a string from the main text is output together with a string from a note.</sch:assert> 
            </constraint>
          </constraintSpec>-->
          <attList>
            <attDef ident="name" mode="replace" usage="req">
              <datatype><rng:text/></datatype>
              <valList type="closed">
                <valItem ident="montalvo"/>
                <valItem ident="southey"/>
                <valItem ident="note"/>
                <valItem ident="type"/>
                <valItem ident="subtype"/>
              </valList>
            </attDef>
            <attDef ident="select" mode="replace">
              <datatype><rng:text/></datatype>
              <valList type="semi">
                <valItem ident="literal"/>
                <valItem ident="approximate"/>
                <valItem ident="omission"/>
                <valItem ident="addition"/>
                <valItem ident="mistranslation"/>
                <valItem ident="quotation"/>
                <valItem ident="compressed"/>
                <valItem ident="cultural"/>
                <valItem ident="syntax"/>
                <valItem ident="reported"/>
                <valItem ident="aesthetic"/>
                <valItem ident="new"/>
                <valItem ident="voice"/>
                <valItem ident="direct"/>
                <valItem ident="antecedent"/>
                <valItem ident="annotated"/>
                <valItem ident="archaism"/>
                <valItem ident="unnatural"/>
                <valItem ident="close"/>
              </valList>
            </attDef>
            <attDef ident="ana" mode="replace">
              <datatype><dataRef key="teidata.numeric"/></datatype>
            </attDef>
          </attList>
        </elementSpec>
        
        <!--SCHEMATRON OUTSIDE ELEMENT SPECS -->
        <constraintSpec ident="nestedClauses" scheme="schematron">
          <constraint>
            <sch:rule context="tei:cl">
              <sch:report test="descendant::tei:cl">Nested clauses!</sch:report>
            </sch:rule>
          </constraint>
        </constraintSpec>
        <constraintSpec ident="clauseNumbering" scheme="schematron">
          <constraint>
            <sch:rule context="tei:cl[preceding::tei:cl]">
              <sch:assert test="number(substring-after(@xml:id, '_c')) gt number(substring-after(preceding::tei:cl[1]/@xml:id, '_c'))">
                The clause number on the xml:id (even when a decimal) should be larger than the clause number on the preceding @xml:id.
              </sch:assert>
            </sch:rule>
          </constraint>
        </constraintSpec>
        <constraintSpec ident="segIds" scheme="schematron">
          <constraint>
            <sch:rule context="tei:seg">
              <sch:assert test="contains(@xml:id, parent::tei:cl/@xml:id)">
                A seg's @xml:id must contain the @xml:id of its cl parent. 
              </sch:assert>
          </sch:rule></constraint>
        </constraintSpec>
        <constraintSpec ident="checking-ref-resp-atts" scheme="schematron">
          <constraint>  
       <!-- <sch:let name="si" value="doc('SI-Amadis.xml')//@xml:id"/>
        <sch:let name="siFile" value="doc('SI-Amadis.xml')"/>
        
        <sch:let name="M_files" value="collection('./Montalvo')[contains(tokenize(./base-uri(), '/')[last()], 'Mont')]"/>
        <sch:let name="M_ids" value="$M_files//@xml:id"/>
        
        <sch:let name="S_files" value="collection('./Southey')[contains(tokenize(./base-uri(), '/')[last()], 'South')]"/>
        <sch:let name="S_ids" value="$S_files//@xml:id"/>-->
        <sch:pattern>
          <sch:rule context="@ref | @resp">
            <sch:let name="si" value="doc('../SI-Amadis.xml')//@xml:id"/>
            <sch:let name="siFile" value="doc('../SI-Amadis.xml')"/>
            <sch:let name="tokens" value="for $i in tokenize(., '\s+') return substring-after($i,'#')"/>
            <sch:assert test="every $token in $tokens satisfies $token = $si">The attribute (after the hashtag, #) must match a defined @xml:id in the Site Index file!</sch:assert>
          </sch:rule>
        </sch:pattern></constraint></constraintSpec>
        
        <!--ebb: Schematron rules for chapter divs and div heads-->
        <constraintSpec ident="checking-div-ids" scheme="schematron">
          <constraint>
            <sch:pattern>
              <sch:let name="M_files" value="collection('../Montalvo')[contains(tokenize(./base-uri(), '/')[last()], 'Mont')]"/>
              <sch:let name="M_ids" value="$M_files//@xml:id"/>
              <sch:let name="S_files" value="collection('../Southey')[contains(tokenize(./base-uri(), '/')[last()], 'South')]"/>
              <sch:let name="S_ids" value="$S_files//@xml:id"/>
              <sch:rule context="tei:div[@type='chapter']">
                <!--ebb: adding the predicate in case we ever decide to add more div types-->
                <sch:report test="@xml:id = $M_ids[not(base-uri() eq current()/base-uri())] | $S_ids[not(base-uri() eq current()/base-uri())]">Fix the xml:id! The xml:id on this document matches another xml:id defined on a different file!
                </sch:report>
              </sch:rule>
            </sch:pattern>
          </constraint>
        </constraintSpec>
        <constraintSpec ident="checking-Montalvo-chapter-id_starter" scheme="schematron">
          <constraint>
            <sch:rule context="tei:div[@type='chapter'][contains(tokenize(./base-uri(), '/')[last()], 'Mont')]">
              <sch:assert test="starts-with(@xml:id, 'M')">The xml:id defined for a Montalvo chapter must begin with the letter M.</sch:assert>
            </sch:rule>
          </constraint>
        </constraintSpec>
        <constraintSpec ident="checking-Southey-chapter-id_starter" scheme="schematron">
          <constraint>
            <sch:rule context="tei:div[@type='chapter'][contains(tokenize(./base-uri(), '/')[last()], 'South')]">
              <sch:assert test="starts-with(@xml:id, 'S')">The xml:id defined for a Southey chapter must begin with the letter S.</sch:assert>
            </sch:rule>
          </constraint>
        </constraintSpec>
        <constraintSpec ident="checking-Montalvo-ch-numbers" scheme="schematron">
          <constraint>
            <sch:rule context="tei:div[@type='chapter'][contains(@xml:id, 'M')][not(@xml:id eq 'M0')]">
              <!--2017-03-11 ebb: The variable conversion and assert test for Roman numeral checking worked in my old Schematron, but xsl:variable isn't working in the ODD context (even in the converted Relax NG XML syntax). I've commented it out here, and will try associating a separate Schematron file as a patch with the ODD-generated schema.-->
              <sch:let name="M_C" value="substring-after(@xml:id, 'M')"/>
              <sch:let name="M_Cnum" value="number($M_C)"/>
                <!---2017-03-11 ebb: note: tei_odds doesn't like the xsl:variable stuff here. See if it works on processing anyway, because it worked in my original Schematron.-->
              <!--  <xsl:variable name="Roman_Cnum">
                  <xsl:number value="$M_Cnum" format="I"/>
                </xsl:variable>-->
               <!-- <xsl:number value="$M_Cnum" format="I"/>
              </sch:let>
                <sch:assert test="if (tei:head[tei:choice]) then tokenize(tei:head//tei:reg/string(), ' ')[2] eq $Roman_Cnum else compare(tokenize(tei:head/string(), ' ')[2], $Roman_Cnum) eq 0 ">
                  The @xml:id isn't matching the Roman numeral chapter number given in the head element on this Chapter div. One of these must be wrong: check what chapter you're actually working on!
                </sch:assert>-->
              <sch:assert test="@xml:id[contains(tokenize(base-uri(), '_')[last()], $M_C)]">
                The chapter number in this file name doesn't match the @xml:id. One of these must be wrong: check what chapter you're actually working on!
              </sch:assert>
            </sch:rule>
          </constraint>
        </constraintSpec>
        <constraintSpec ident="checking-Southey-ch-numbers" scheme="schematron">
          <constraint>
            <sch:rule context="tei:div[@type='chapter'][contains(@xml:id, 'S')]">
              <sch:let name="S_Cnum" value="substring-after(@xml:id, 'S')"/>
              <sch:assert test="contains(tei:head/string(), $S_Cnum)">
                The @xml:id isn't matching the chapter number given in the head element on this Chapter div. One of these must be wrong: check what chapter you're actually working on!
              </sch:assert>
              <sch:assert test="@xml:id[contains(tokenize(base-uri(), '_')[last()], $S_Cnum)]">
                The chapter number in this file name doesn't match the @xml:id. One of these must be wrong: check what chapter you're actually working on!
              </sch:assert>
            </sch:rule>
          </constraint>
        </constraintSpec>
        <constraintSpec ident="Montalvo-locus-presence" scheme="schematron">
          <constraint>
            <sch:rule context="tei:div[@type='chapter'][contains(@xml:id, 'M')]">
              <sch:assert test="tei:head/tei:locus">
                A Montalvo chapter div must contain a child head element, which must contain a locus element.
              </sch:assert>
            </sch:rule>
          </constraint>
        </constraintSpec>
        <constraintSpec ident="Montalvo-locus-checking" scheme="schematron">
          <constraint>
            <sch:rule context="tei:div[@type='chapter'][contains(@xml:id, 'M')]/tei:head/tei:locus">
              <sch:assert test="matches(@from, '[ivxlcdm]+\-(r|v)$') and matches(@to, '[ivxlcdm]+\-(r|v)$')">
                The number of folia must be coded as a Roman numeral (lower case), followed by a hyphen and either the letter 'r' or 'v'.
              </sch:assert>
            </sch:rule>
          </constraint>
        </constraintSpec>
        
        <!--ebb: Schematron rules for milestone and anchor elements -->
        <!--milestone-->
        <constraintSpec ident="milestone-distinct-anas" scheme="schematron">
          <constraint>
            <sch:rule context="tei:milestone[@unit='said']">
              <sch:report test="not(@ana)">
                Every milestone related to speech (marked with @unit='said') must have an @ana attribute to mark whether this is a start, end, or interruption marker for a spoken passage. 
              </sch:report>
            </sch:rule>
            <sch:rule context="tei:milestone[@unit='said']">
              <sch:report test="@ana = preceding::tei:milestone[@unit eq 'said'][@ana][1]/@ana">
                For speeches: the @ana must NOT be the same on two subsequent milestones!
              </sch:report>   
            </sch:rule>
          </constraint>
        </constraintSpec>
        <constraintSpec ident="milestone_speeches_Sequencing1" scheme="schematron">
          <constraint>
            <sch:rule context="tei:milestone[@unit='said'][@ana='start']">
              <sch:report test="following::tei:milestone[@unit eq 'said'][@ana][1][@ana eq 'intEnd']">In tagging speeches, the value of @ana for the next milestone after "start" must never be "intEnd"!
              </sch:report>
            </sch:rule>
          </constraint>
        </constraintSpec>
        <constraintSpec ident="milestone_speeches_Sequencing2" scheme="schematron">
          <constraint>
            <sch:rule context="tei:milestone[@unit='said'][@ana='intStart']">
              <sch:assert test="following::tei:milestone[@unit eq 'said'][@ana][1][@ana eq 'intEnd']">For speeches: After an @ana="intStart" (interruption start) the next @ana must be "intEnd" (interruption end)!
              </sch:assert>
            </sch:rule>
          </constraint>
        </constraintSpec>      
        <constraintSpec ident="milestone-start-resp" scheme="schematron">
          <constraint>
            <sch:rule context="tei:milestone[@unit='said'][@ana='start']">
              <sch:assert test="@resp">
                A milestone marking the start of a speech must always have an @resp attribute pointing to the #xml:id for the speaker.
              </sch:assert>
            </sch:rule>
          </constraint>
        </constraintSpec>
        <constraintSpec ident="unclear_speech_resp" scheme="schematron">
          <constraint>
            <sch:rule context="tei:milestone[@unit='said'][@ana='start'][@type]">
              <sch:assert test="@cert">
                @cert needs to be present with @type='unclear'. (When the @resp is hard to attribute, set an @type of 'unclear' and add an @cert of "low", "medium" or "unknown".) 
              </sch:assert>
            </sch:rule>
          </constraint>
        </constraintSpec>
        
        <!--anchor-->
        <constraintSpec ident="anchor_Sequencing_Main1" scheme="schematron">
          <constraint>
            <sch:rule context="tei:anchor[not(ancestor::tei:note)][preceding::tei:anchor[not(ancestor::tei:note)]]">
              <sch:report test="matches(@ana, preceding::tei:anchor[not(ancestor::tei:note)][1]/@ana)">
                The @ana must NOT be the same on two subsequent anchor elements in the main text!</sch:report>
            </sch:rule>
          </constraint>
        </constraintSpec> 
        <constraintSpec ident="anchor_Sequencing_Notes1" scheme="schematron">
          <constraint>
            <sch:rule context="tei:anchor[ancestor::tei:note][preceding::tei:anchor[ancestor::tei:note]]">
              <sch:report test="matches(@ana, preceding::tei:anchor[ancestor::tei:note][1]/@ana)">
                The @ana must NOT be the same on two subsequent anchor elements within a note! 
              </sch:report>
            </sch:rule>
          </constraint>
        </constraintSpec>
        <constraintSpec ident="anchor_Sequencing_Main2" scheme="schematron">
          <constraint>
            <sch:rule context="tei:anchor[@ana='start'][ancestor::tei:note]">
              <sch:report test="following::tei:anchor[not(ancestor::tei:note)][1][@ana eq 'intEnd']">In tagging a disconnected (interrupted) series of translations in the main text, the value of @ana for the next anchor after "start" must never be "intEnd"!
              </sch:report>  
            </sch:rule>
          </constraint>
        </constraintSpec>
        <constraintSpec ident="anchor_Sequencing_Notes2" scheme="schematron">
          <constraint>
            <sch:rule context="tei:anchor[@ana='start'][not(ancestor::tei:note)]">
              <sch:report test="following::tei:anchor[@ana][ancestor::tei:note][1][@ana eq 'intEnd']">In tagging a disconnected (interrupted) series of translations within a note, the value of @ana for the next milestone after "start" must never be "intEnd"!
              </sch:report>  
            </sch:rule>
          </constraint>
        </constraintSpec>
        <constraintSpec ident="anchor_Sequencing_Main3" scheme="schematron">
          <constraint>
            <sch:rule context="tei:anchor[@ana='start'][not(ancestor::tei:note)]">
              <sch:assert test="following::tei:anchor[@ana eq 'end'][not(ancestor::tei:note)][1]/parent::node()/name() eq current()/parent::node()/name()">
                Every anchor[@ana='start'] must have a correlating anchor[@ana='end'] with the same kind of parent element. 
                This prevents ambiguous pairings of anchor elements between main text and notes.</sch:assert> 
            </sch:rule>
          </constraint>
        </constraintSpec>
        <constraintSpec ident="anchor_Sequencing_Notes3" scheme="schematron">
          <constraint>
            <sch:rule context="tei:anchor[@ana eq 'start'][ancestor::tei:note]">
              <sch:assert test="following-sibling::tei:anchor[@ana eq 'end']">
                Every anchor[@ana='start'] inside a note must have an anchor[@ana='end'] within the same parent.
              </sch:assert>
            </sch:rule>
          </constraint>
        </constraintSpec>
        <constraintSpec ident="anchor_Sequencing_Main4" scheme="schematron">
          <constraint>
            <sch:rule context="tei:anchor[@ana eq 'intStart'][not(ancestor::tei:note)]">
              <sch:assert test="following::tei:anchor[not(ancestor::tei:note)][1][@ana eq 'intEnd']">After an @ana="intStart" (interruption start) in the main text, the next @ana must be "intEnd" (interruption end)!  
              </sch:assert>
            </sch:rule>
          </constraint>            
        </constraintSpec>
        <constraintSpec ident="anchor_Sequencing_Notes4" scheme="schematron">
          <constraint>
            <sch:rule context="tei:anchor[@ana eq 'intStart'][ancestor::tei:note]">
              <sch:assert test="following::tei:anchor[@ana][ancestor::tei:note][1][@ana eq 'intEnd']"> After an @ana="intStart" (interruption start) in a note, the next @ana must be "intEnd" (interruption end)!   
              </sch:assert>
            </sch:rule>
          </constraint>
        </constraintSpec>
        <constraintSpec ident="anchor-corresp" scheme="schematron">
          <constraint>
            <sch:rule context="tei:anchor[@ana='start'][not(@type='add')]">
              <sch:report test="not(@corresp)">
                An @corresp must be present on this anchor to point to a corresponding unit in Montalvo. This rule applies as long as the anchor is NOT an addition by Southey (@type='add').
              </sch:report>
            </sch:rule>
          </constraint>
        </constraintSpec>  
        <constraintSpec ident="id-checking-corresps" scheme="schematron">
          <constraint>
            <sch:pattern>
              <sch:rule context="*[@corresp]">
                <sch:let name="M_files" value="collection('../Montalvo')[contains(tokenize(./base-uri(), '/')[last()], 'Mont')]"/>
                <sch:let name="M_ids" value="$M_files//@xml:id"/>
                <sch:let name="tokens" value="for $i in tokenize(@corresp, '\s+') return substring-after($i,'#')"/>
                <sch:assert test="every $token in $tokens satisfies $token = $M_ids">
                  The attribute (after the hashtag, #) must match a defined @xml:id in the corresponding Montalvo 1547 edition file!
                </sch:assert>
              </sch:rule>
            </sch:pattern>
          </constraint>
        </constraintSpec>
       <constraintSpec ident="keep-corresps-distinct" scheme="schematron">
         <constraint>
           <sch:pattern>
             <sch:rule context="tei:anchor[@corresp]">
                <sch:report test="@corresp = following::tei:anchor/@corresp">
                  Every anchor must have a unique ID. Add a seg element in Montalvo with its own ID if needed.
                </sch:report>
              </sch:rule>
            </sch:pattern>
          </constraint>
        </constraintSpec>   
       <!--feature structures schematron constraints -->
        <constraintSpec ident="featureStructures" scheme="schematron">
          <constraint>
            <sch:pattern>
              <sch:rule context="tei:fs[not(tei:f[@name eq 'note'])]">
                <sch:assert test="tei:f[@name eq 'type']">An &lt;f&gt; element with @name ='type' is necessary here to declare the type of match.</sch:assert>
              </sch:rule>
            </sch:pattern>
            <sch:pattern>
              <sch:rule context="tei:f[@name eq 'type']">
                <sch:assert
                  test="@select = ('literal', 'approximate', 'omission', 'addition', 'mistranslation', 'quotation')">Valid values for "type of translation" are: literal, approximate, omission, addition, quotation.</sch:assert>
              </sch:rule>
              </sch:pattern>
              <sch:pattern>
                <sch:let name="approxValues"
                  value="('compressed', 'cultural', 'syntax', 'reported', 'aesthetic', 'new', 'voice', 'direct', 'antecedent', 'annotated', 'archaism')"/>
                <sch:let name="addValues" value="('cultural', 'aesthetic', 'voice', 'antecedent', 'archaism')"/>
                <sch:let name="misValues" value="('cultural', 'voice', 'archaism')"/>
                <sch:let name="litValues" value="('unnatural', 'archaism', 'close')"/>               
                <sch:rule context="tei:f[@name eq 'subtype'][preceding-sibling::tei:f[@select eq 'literal']]">
                  <sch:let name="subtypes"
                    value=" for $i in tokenize(@select, '\s+') return $i"/>
                  <sch:assert
                    test="every $subtype in $subtypes satisfies $subtype = $litValues">The only valid subtypes of a literal translation are 'close', 'archaism', and 'unnatural'.</sch:assert>
                </sch:rule>
                <sch:rule context="tei:f[@name eq 'subtype'][preceding-sibling::tei:f[@select eq 'approximate']]">
                  <sch:let name="subtypes"
                    value=" for $i in tokenize(@select, '\s+') return $i"/>
                  <sch:assert
                    test="every $subtype in $subtypes satisfies $subtype = $approxValues">Valid values for a subtype of an approximate translation are: 'compressed', 'cultural', 'syntax', 'reported', 'antecedent', 'new', 'annotated' and 'aesthetic'. </sch:assert>
                </sch:rule>
                <sch:rule context="tei:f[@name eq 'subtype'][preceding-sibling::tei:f[@select eq 'mistranslation']]">
                  <sch:let name="subtypes"
                    value="for $i in tokenize(@select, '\s+') return $i"/>
                  <sch:assert
                    test="every $subtype in $subtypes satisfies $subtype = $misValues">Valid values for a subtype of a mistranslation are: 'cultural', 'archaism', and 'voice'.</sch:assert>
                </sch:rule>
                <sch:rule context="tei:f[@name eq 'subtype'][preceding-sibling::tei:f[@select eq 'addition']]">
                  <sch:let name="subtypes"
                    value=" for $i in tokenize(@select, '\s+') return $i"/>
                  <sch:assert
                    test="every $subtype in $subtypes satisfies $subtype = $addValues">Valid values for a subtype of an addition are: 'cultural', 'antecedent', 'voice', and 'aesthetic'.</sch:assert>
                </sch:rule>
            </sch:pattern>
          </constraint>
        </constraintSpec>

        <!--ebb: The following is a model copied from Syd's slide to show me how to tuck Schematron into ODD-->
       <!-- <elementSpec module="core" ident="anchor" mode="change">
          <constraintSpec ident="subtype-matched-type" scheme="schematron">
            <constraint>
              <sch:report test="@type = 'person'  and  not( @subtype = ('officer','enlisted') )">
                a name of a person should be sub-catagorized as an officer's name or an enlisted
                man's name
              </sch:report>
              <sch:report test="@type = 'ship'  and  not( @subtype = ('merchant','naval')">
                the name of a ship should be sub-catagorized as that of a merchant or naval ship
              </sch:report>
            </constraint>
          </constraintSpec>
          <attList>
            <attDef ident="type" mode="change" usage="req">
              <datatype minOccurs="1" maxOccurs="1">
                <dataRef key="teidata.enumerated"/>
              </datatype>
              <valList type="closed">
                <valItem ident="person"/>
                <valItem ident="place"/>
                <valItem ident="port"/>
                <valItem ident="ship"/>
              </valList>
            </attDef>
            <attDef ident="subtype" mode="change">
              <datatype minOccurs="1" maxOccurs="1">
                <dataRef key="teidata.enumerated"/>
              </datatype>
              <valList type="closed">
                <valItem ident="officer"/>
                <valItem ident="enlisted"/>
                <valItem ident="merchant"/>
                <valItem ident="naval"/>
              </valList>
            </attDef>
          </attList>
        </elementSpec>-->
      </schemaSpec>
    </body>
  </text>
</TEI>
